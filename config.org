* Appearance

** Hide window decorations

I don't like how the default GNOME window decorations look with emacs,
so I disable them.

#+begin_src emacs-lisp
(setq default-frame-alist '((undecorated . t)))
#+end_src

I also have to inable the internal border to make the window resizeable
without the decorations.

#+begin_src emacs-lisp
(add-to-list 'default-frame-alist '(drag-internal-border . 1))
(add-to-list 'default-frame-alist '(internal-border-width . 5))
#+end_src

** Configure Emacs theme and font

#+begin_src emacs-lisp
;; Everforest theme
(setq doom-theme 'doom-everforest)
(setq doom-everforest-background "medium")

;; IBM Plex Mono with extra symbols 󰋇 󰇳 󰋇 
(setq doom-font (font-spec :family "BlexMono Nerd Font" :size 16))
#+end_src

* Editing experience

** Relative line numbers

Relative line numbers allow to quickly jump to a desired line by typing a number
before pressing j/k (up/down).

#+begin_src emacs-lisp
(setq display-line-numbers-type 'relative)
#+end_src

** Key bindings

*** Comment lines

Add a binding to comment lines. =C-/= is not really a vim-style binding,
but it is used by VSCode so I got used to it.

#+begin_src emacs-lisp
(map! "C-/" #'evilnc-comment-or-uncomment-lines)
#+end_src

*** Save file

The default binding for file saving (=SPC f s=) is very annoying to press on
Colemak (i use colemak btw). I remap it to =SPC s=, which is much quicker.

=SPC s= is already binded to the /"search"/ map, so I rebind it to =SPC l=
(where "l" stands for "locate")

#+begin_src emacs-lisp
(map! :leader
      "s" #'save-buffer
      "l" doom-leader-search-map)
#+end_src

** Quick temporary directories

I utilize temporary directories inside of =/tmp= very often when I want to test
something. In my fish shell config, I have an abbreviation that expands to ~cd (mktemp -d)~ -
it creates a random tmp directory and puts me into it. This function does the same
thing, but in Emacs.

#+begin_src emacs-lisp
(defun temp-dir ()
  "Open a new temporary directory"
  (interactive)
  (dired (make-temp-file "emacs." t))
  (call-interactively #'find-file))
#+end_src

The =SPC f= prefix is used for file-related commands in Doom Emacs, and the =t= key
is not used by anything there, so "t" stands for "tmp" now.

#+begin_src emacs-lisp
(map! :map 'doom-leader-file-map
      "t" #'temp-dir)
#+end_src

* Package configuration

** Languages

*** Python

I manage my Python project dependencies with [[https://python-poetry.org/][Poetry]], so I set a shortcut to
be able to quickly open the poetry menu.

#+begin_src emacs-lisp
(map! :localleader
      :mode 'python-mode
      ("p" #'poetry))
#+end_src

Use =pylint= for error checking and configure it to report all possible errors,
because I prefer to use very strict linting defauts with optional rule blacklists,
not the other way around.

This also configures the ~pylint_venv~ hook to make pylint detect dependencies
inside of Poetry virtual environments.

#+begin_src emacs-lisp
(after! python
  (setq
   lsp-pylsp-plugins-flake8-enabled nil
   lsp-pylsp-plugins-pylint-enabled t
   lsp-pylsp-plugins-pylint-args ["--init-hook='import pylint_venv; pylint_venv.inithook()'"
                                  "--max-line-length=88"
                                  "--enable=all"
                                  "--enable-all-extensions"]))
#+end_src

*** Markdown

*Grip* is a package used for previewing Markdown documents. It supports
previewing within Emacs via WebKit, however, that option is broken on
Wayland and causes Emacs to crash. I disable it to open the preview in my
default browser instead.

#+begin_src emacs-lisp
(use-package! grip-mode
  :defer t
  :custom
  (grip-preview-use-webkit nil))
#+end_src

** Magit

Doom emacs comes with a lot of key bindings by default, but for some reason
it doesn't set any binding for ~git push~, which is an action that is
performed very often.

#+begin_src emacs-lisp
(use-package! magit
  :defer t
  :config
  (map! :map 'doom-leader-git-map
        "p" #'magit-push-current-to-upstream))
#+end_src

** Evil Motion Trainer

This is a package that forces you to use more advanced vim motions instead of
just spamming j/k. At least, it's what it's /supposed/ to do. Most of the time I just
ignore it. But maybe one day I'll actually learn to use vim motions properly
because of this package. Maybe.

#+begin_src emacs-lisp
(use-package! evil-motion-trainer
  :defer t
  :config
  (global-evil-motion-trainer-mode 1))
#+end_src
